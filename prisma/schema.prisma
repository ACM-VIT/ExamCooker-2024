datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   String       @id @default(cuid())
  name                 String?
  email                String       @unique
  emailVerified        DateTime?    @map("email_verified")
  image                String?
  accounts             Account[]
  session              Session[]
  role                 Role         @default(USER)
  notes                Note[]       @relation("UserNotes")
  bookmarkedNotes      Note[]       @relation("UserBookmarkedNotes")
  bookmarkedPastPapers PastPaper[]  @relation("UserBookmarkedPastPapers")
  comments             Comment[]
  viewHistory          ViewHistory?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  forumPosts           ForumPost[]
  pastPapers           PastPaper[]  @relation("UserPastPapers")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Role {
  USER
  MODERATOR
}

model Note {
  id           String   @id @default(cuid())
  title        String
  author       User     @relation(fields: [authorId], references: [id], name: "UserNotes")
  authorId     String
  fileUrl      String
  isClear      Boolean  @default(false)
  tags         Tag[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  bookmarkedBy User[]   @relation("UserBookmarkedNotes")
}

model ViewHistory {
  id        Int      @id @default(sequence())
  recent    String[]
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Forum {
  id         String      @id @default(cuid())
  courseName String
  tags       Tag[]
  posts      ForumPost[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model ForumPost {
  id        String    @id @default(cuid())
  title     String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  forum     Forum     @relation(fields: [forumId], references: [id])
  forumId   String
  comments  Comment[]
  tags      Tag[]
  rating    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  forumPost   ForumPost @relation(fields: [forumPostId], references: [id])
  forumPostId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PastPaper {
  id           String   @id @default(cuid())
  title        String
  fileUrl      String
  tags         Tag[]
  author       User     @relation(fields: [authorId], references: [id], name: "UserPastPapers")
  authorId     String
  isClear      Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  bookmarkedBy User[]   @relation("UserBookmarkedPastPapers")
}

model Tag {
  id         String      @id @default(cuid())
  name       String      @unique
  notes      Note[]
  forums     Forum[]
  forumPosts ForumPost[]
  pastPapers PastPaper[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Subject {
  id      String   @id @default(cuid())
  name    String   @unique
  modules Module[]
}

model Module {
  id            String   @id @default(cuid())
  title         String
  subject       Subject  @relation(fields: [subjectId], references: [id])
  subjectId     String
  webReferences String[]
  youtubeLinks  String[]
}
